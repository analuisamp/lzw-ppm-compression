# compressor.py

import sys
from time import time
from lzw_compress import compressor  # Fun√ß√£o para compress√£o LZW
from lzw_decompress import decompress  # Fun√ß√£o para descompress√£o LZW
from bitarray import bitarray  # Biblioteca usada para manipula√ß√£o de bits

# Verifica se o n√∫mero de argumentos passados √© correto
if len(sys.argv) != 4:
    print("Uso: python compressor.py [input_file] [max_dict_size] [estrategia: E ou R]")
    sys.exit(1)

# Receber vari√°veis da execu√ß√£o a partir dos argumentos passados via linha de comando
input_file = sys.argv[1]  # Arquivo de entrada a ser comprimido
tam_max = int(sys.argv[2])  # Tamanho m√°ximo do dicion√°rio utilizado no LZW
estrategia = sys.argv[3]  # Estrat√©gia para lidar com o dicion√°rio cheio: E (expans√£o) ou R (reset)

# Abrir o arquivo de entrada no modo bin√°rio ('rb' = read binary)
with open(input_file, 'rb') as file:
    data = file.read()  # L√™ o conte√∫do do arquivo e armazena em 'data'

# Compress√£o
inicio = time()  # Marca o tempo inicial da compress√£o
compressed_data, comprimento_medio = compressor(data, tam_max, estrategia)  # Executa a compress√£o
fim = time()  # Marca o tempo final da compress√£o

# Calcula o tamanho do arquivo comprimido em bytes
tam_compressed = len(compressed_data)  # Tamanho do dado comprimido
bytes_tam_compressed = tam_compressed.to_bytes(5, 'big')  # Converte o tamanho para 5 bytes no formato big-endian

# Gerar o nome do arquivo de sa√≠da, com a extens√£o '.lzw.bin'
split = input_file.split('.')  # Separa o nome do arquivo por '.' para lidar com a extens√£o
# Se houver exatamente uma extens√£o, substitui, sen√£o apenas adiciona
output_file = split[0] + 'lzw.bin' if len(split) == 2 else input_file + 'lzw.bin'

# Escrever o arquivo comprimido
with open(output_file, 'wb') as file:  # Abre o arquivo de sa√≠da no modo bin√°rio de escrita ('wb' = write binary)
    file.write(bytes_tam_compressed)  # Escreve o tamanho do arquivo comprimido como cabe√ßalho
    compressed_data.tofile(file)  # Escreve o conte√∫do comprimido no arquivo

# Exibe informa√ß√µes de desempenho da compress√£o
print(f'Demorou {fim - inicio} segundos para comprimir')  # Tempo total da compress√£o
print(f'O comprimento m√©dio dos valores foi {comprimento_medio[-1]}')  # Comprimento m√©dio dos s√≠mbolos comprimidos
print("Compress√£o conclu√≠da!")  # Confirma√ß√£o de que a compress√£o terminou

# Descompress√£o
inicio = time()  # Marca o tempo inicial da descompress√£o
uncompressed_data = decompress(compressed_data, tam_max, tam_compressed)  # Executa a descompress√£o
fim = time()  # Marca o tempo final da descompress√£o

# Gerar o nome do arquivo de sa√≠da descomprimido
output_file = split[0] + 'uncompressed.bin' if len(split) == 2 else input_file + 'uncompressed.bin'

# Escrever o arquivo descomprimido
with open(output_file, 'wb') as file:  # Abre o arquivo de sa√≠da no modo bin√°rio de escrita
    for string in uncompressed_data:  # Itera sobre os dados descomprimidos
        file.write(string)  # Escreve cada string descomprimida no arquivo

# Exibe informa√ß√µes de desempenho da descompress√£o
print(f'Demorou {fim - inicio} segundos para descomprimir')  # Tempo total da descompress√£o
print("Descompress√£o conclu√≠da!")  # Confirma√ß√£o de que a descompress√£o terminou


def compress_with_stats_lzw(data, max_dict_size):
    compressed_data = []  # Dados comprimidos
    lengths = []  # Lista para salvar os comprimentos m√©dios at√© o n-√©simo byte
    last_m_lengths = []  # Lista para salvar os comprimentos dos √∫ltimos m bytes
    total_length = 0  # Comprimento total comprimido at√© o n-√©simo byte
    m = 100  # Valor de m

    # Simula√ß√£o da compress√£o LZW
    for i, byte in enumerate(data):
        # Supondo que o processo de compress√£o adiciona um novo s√≠mbolo comprimido
        compressed_data.append(byte)  # Placeholder para o s√≠mbolo comprimido
        
        total_length += len(compressed_data)  # Atualiza o comprimento total
        avg_length = total_length / (i + 1)  # Comprimento m√©dio at√© o n-√©simo byte
        lengths.append(avg_length)  # Salva o comprimento m√©dio
        
        # Calcula o comprimento m√©dio dos √∫ltimos m bytes
        if i + 1 >= m:
            avg_length_last_m = total_length / m
        else:
            avg_length_last_m = total_length / (i + 1)
        
        last_m_lengths.append(avg_length_last_m)

    return compressed_data, lengths, last_m_lengths

import matplotlib.pyplot as plt

def plot_avg_length(lengths, title="Curva de I(n) x n"):
    """
    Gera o gr√°fico do comprimento m√©dio I(n) x n.
    
    :param lengths: Lista com os comprimentos m√©dios at√© o n-√©simo byte.
    :param title: T√≠tulo do gr√°fico.
    """
    plt.plot(range(len(lengths)), lengths)
    plt.title(title)
    plt.xlabel("N√∫mero de bytes (n)")
    plt.ylabel("Comprimento m√©dio I(n)")
    plt.grid(True)
    plt.show()

def plot_avg_last_m_length(last_m_lengths, title="Curva de I(ùëö) x n"):
    """
    Gera o gr√°fico do comprimento m√©dio I(ùëö) x n.
    
    :param last_m_lengths: Lista com os comprimentos m√©dios dos √∫ltimos m bytes at√© o n-√©simo byte.
    :param title: T√≠tulo do gr√°fico.
    """
    plt.plot(range(len(last_m_lengths)), last_m_lengths)
    plt.title(title)
    plt.xlabel("N√∫mero de bytes (n)")
    plt.ylabel("Comprimento m√©dio dos √∫ltimos m bytes")
    plt.grid(True)
    plt.show()

# Compress√£o com LZW
compressed_data, lengths, last_m_lengths = compress_with_stats_lzw(data, max_dict_size=2**21)

# Gerar gr√°fico I(n) x n
plot_avg_length(lengths, title="Curva de I(n) x n - LZW")

# Gerar gr√°fico I(ùëö) x n
plot_avg_last_m_length(last_m_lengths, title="Curva de I(m) x n - LZW")


